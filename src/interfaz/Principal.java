/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import static java.awt.Color.*;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import logica.*;


/**
 *
 * @author luis
 */
public class Principal extends javax.swing.JFrame {
    
    Control controlador;
    Min_Max minimax;
    String auxCaballoBlanco;
    URL urlCaballoBlanco;
    ImageIcon iconAux;
    JButton blanco;
    String auxCaballoNegro;
    URL urlCaballoNegro;
    ImageIcon iconNegro;
    JButton negro;
    int posEvitar;
    
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setResizable(false);
        this.setTitle("ALPHAZERO");
        this.setLocationRelativeTo(null);
        
        //agrega el banner
        String path = "/img/AI.png";
        URL url = this.getClass().getResource(path);
        ImageIcon icon = new ImageIcon(url);
        banner.setIcon(icon);

        controlador = new Control();
        minimax = new Min_Max();
        minimax.calcularTotalPosibilidades();
        campoJugador.setText(""+0);
        campoMaquina.setText(""+0);
       posEvitar=-1;
        cargarTablero();
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablero = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        banner = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        items = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jugar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        campoMaquina = new javax.swing.JTextField();
        campoJugador = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablero.setLayout(new java.awt.GridLayout(6, 6));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(banner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(banner, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
        );

        jLabel1.setText("# de Items");

        jugar.setText("JUGAR!");
        jugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugarActionPerformed(evt);
            }
        });

        jLabel2.setText("PUNTAJES");

        jLabel3.setText("Maquina");

        jLabel4.setText("Jugador");

        campoMaquina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoMaquinaActionPerformed(evt);
            }
        });

        campoJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoJugadorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(items)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(campoMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jugar))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(campoJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel1))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(items, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jugar)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(campoMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoJugador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tablero, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tablero, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jugarActionPerformed
        // TODO add your handling code here:       
        try {
            int numeroItems = Integer.parseInt(items.getText());
            
            if (numeroItems > 33) {
                JOptionPane.showMessageDialog(null,"No puede ingresar tantos items","Error", JOptionPane.ERROR_MESSAGE);
                items.setText(null);
            }
           else if ((numeroItems % 2) == 0) {
                JOptionPane.showMessageDialog(null,"Ingrese un número impar Ej: "+ (numeroItems-1),"Error", JOptionPane.WARNING_MESSAGE);
                items.setText(null);
           }
           else{
               int[] juego = controlador.generarJuego(numeroItems);
               controlador.setCantidadManzanas(numeroItems);
               controlador.setCaballoMaquina(juego[0]);
               controlador.setCaballoOponente(juego[1]);
               ArrayList <Integer> manzanas = new ArrayList<>();
                for (int i = 2; i < juego.length; i++) {
                   manzanas.add(juego[i]);
                }
                controlador.setManzanas(manzanas);
                cargarJuego(juego); 
                initJuego();
                jugar.setEnabled(false);
           }
        } catch (HeadlessException | NumberFormatException e) {
            //System.out.println(e);
            JOptionPane.showMessageDialog(null,"Ingrese un número","Error", JOptionPane.ERROR_MESSAGE);
            items.setText(null);
        }
    }//GEN-LAST:event_jugarActionPerformed

    private void campoMaquinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoMaquinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoMaquinaActionPerformed

    private void campoJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoJugadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoJugadorActionPerformed

     public void mover(int jugador, int posActual, int posNext){      
        //Jugador = 0 --> Maquina
        //Jugador = 1 --> Humano
        habilitarBotones(posActual);
        try{
                Thread.sleep(1000);
            } catch (Exception e) {} 
         tablero.remove(posActual);
        int index = controlador.getManzanas().indexOf(posNext);
        int nJuego;
        int juego[]=new int[2];
        switch(jugador){
            
            case 0:
                if(index!=-1){
                    controlador.getManzanas().remove(index);
                    controlador.setPuntajeMaquina();
                    campoMaquina.setText(""+controlador.getPuntajeMaquina());
                }                
                if(controlador.getPuntajeJugador()==controlador.getPuntajeMaquina()){
                    posEvitar=controlador.getCaballoMaquina();
                    controlador.evitar(posNext);
                }
                else{
                     posEvitar=posActual;
                     controlador.evitar(posEvitar);
                }
                   
                nJuego = controlador.getManzanas().size() + 2;
                juego = new int[nJuego];
                juego[0] = posNext;
                juego[1] = controlador.getCaballoOponente();
                break;
                
            case 1:
                if(index!=-1){
                    controlador.getManzanas().remove(index);
                    controlador.setPuntajeJugador();
                    campoJugador.setText(""+controlador.getPuntajeJugador());
                 }
                if(controlador.getPuntajeJugador()==controlador.getPuntajeMaquina()){
                    posEvitar=controlador.getCaballoMaquina();
                    controlador.evitar(posEvitar);
                }
                else{
                    
                }
               
                nJuego = controlador.getManzanas().size() + 2;
                juego = new int[nJuego];
                juego[0] = controlador.getCaballoMaquina();
                juego[1] = posNext;
                
                break;
                
            default:
                break;
        }
        
        ArrayList <Integer> x = controlador.getManzanas();
        int cont=2;
        if(controlador.getManzanas().size()>0)
            for (int i = 0; i < x.size(); i++) {
                juego[cont] = x.get(i);
                cont++;
            }
        tablero.removeAll();
        cargarTablero();
        cargarJuego(juego);
        if (jugador==1) {
            if (controlador.getManzanas().size()+controlador.getPuntajeMaquina()<controlador.getPuntajeJugador()) {
                JOptionPane.showMessageDialog(null,"Ganaste");
                controlador = new Control();
                tablero.removeAll();
                jugar.setEnabled(true);
                cargarTablero();
                items.setText(null);
                campoMaquina.setText(null);
                campoJugador.setText(null);                
                this.paintAll(this.getGraphics());
            }
        }
        else if (jugador==0) {
            if (controlador.getManzanas().size()+controlador.getPuntajeJugador()<controlador.getPuntajeMaquina()) {
                JOptionPane.showMessageDialog(null,"Ganó la maquina");
                controlador = new Control();
                tablero.removeAll();
                jugar.setEnabled(true);
                cargarTablero();
                items.setText(null);
                campoMaquina.setText(null);
                campoJugador.setText(null);                
                this.paintAll(this.getGraphics());
            }
        }        
        else if(controlador.getManzanas().isEmpty()){
            if(controlador.getPuntajeJugador()>controlador.getPuntajeMaquina()){
                    JOptionPane.showMessageDialog(null,"Ganaste");
                    controlador = new Control();
            }else if(controlador.getPuntajeMaquina()>controlador.getPuntajeJugador()){
                    JOptionPane.showMessageDialog(null,"Ganó la maquina");
                    controlador = new Control();
                }
            tablero.removeAll();
            jugar.setEnabled(true);
            cargarTablero();
                items.setText(null);
                campoMaquina.setText(null);
                campoJugador.setText(null);            
            this.paintAll(this.getGraphics());
        }
        
    }

   public void initJuego(){
       if(!controlador.getManzanas().isEmpty()){
           int movimientoMaquina = controlador.moverMaquina();
            
            mover(0, controlador.getCaballoMaquina(), movimientoMaquina);
            habilitarBotones(controlador.getCaballoOponente());
            controlador.setCaballoMaquina(movimientoMaquina);
       }       
    }
    
    
    public void cargarJuego(int[] juego){
        
        //definicion de variables para las imagenes de los caballos
        String auxCaballoBlanco = "/img/0.png";
        URL urlCaballoBlanco = this.getClass().getResource(auxCaballoBlanco);
        ImageIcon iconAux = new ImageIcon(urlCaballoBlanco);
        JButton blanco = new JButton();
        blanco.setPreferredSize(new Dimension(50, 50));
        blanco.setIcon(iconAux);
        
        String auxCaballoNegro = "/img/1.png";
        URL urlCaballoNegro = this.getClass().getResource(auxCaballoNegro);
        ImageIcon iconNegro = new ImageIcon(urlCaballoNegro);
        JButton negro = new JButton();
        negro.setPreferredSize(new Dimension(50, 50));
        negro.setIcon(iconNegro);
        
        tablero.remove(juego[0]);
        tablero.add(blanco, juego[0]);
        tablero.remove(juego[1]);
        tablero.add(negro,juego[1]);
        
        
        String manzana = "/img/manzana.png";
        URL urlManzana = this.getClass().getResource(manzana);
        ImageIcon iconManzana = new ImageIcon(urlManzana);
        
        
        this.paintAll(this.getGraphics());
        
        for (int i = 2; i < juego.length; i++) {
            JButton botonManzana = new JButton();
            botonManzana.setPreferredSize(new Dimension(50, 50));
            botonManzana.setIcon(iconManzana);
            
            tablero.remove(juego[i]);
            int x= juego[i];
             botonManzana.addActionListener(new ActionListener() {
                @Override
             public void actionPerformed(ActionEvent ae) {
                    mover(1, controlador.getCaballoOponente(),x);
                    controlador.setCaballoOponente(x);
                    initJuego();
                }
            });
             botonManzana.setEnabled(false);
            tablero.add(botonManzana, juego[i]);
        }
        
        
        this.paintAll(this.getGraphics());
        
    }
    
public void habilitarBotones(int pos){

    ArrayList<Integer> posibles = minimax.getMovimientos(pos);
    
    for (int i = 0; i < posibles.size(); i++){
        tablero.getComponent(posibles.get(i)).setBackground(LIGHT_GRAY);
        tablero.getComponent(posibles.get(i)).setEnabled(true);
    }
    this.paintAll(this.getGraphics());
     
}


    
public void cargarTablero(){
    
    for (int i = 0; i < 6; i++) {
        
        for (int j = 0; j < 6; j++) {
            
            JButton auxBoton = new JButton();
            auxBoton.setPreferredSize( new Dimension (50,50));
            auxBoton.setEnabled(false);

            if ((((i+j) % 2) == 0))
                auxBoton.setBackground(WHITE);
            else
                auxBoton.setBackground(BLACK);
            tablero.add(auxBoton);
            int pos = j + 6 * i;
            auxBoton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    mover(1, controlador.getCaballoOponente(), pos);
                    controlador.setCaballoOponente(pos);
                    initJuego();
                }
            });
        }
    }   
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel banner;
    private javax.swing.JTextField campoJugador;
    private javax.swing.JTextField campoMaquina;
    private javax.swing.JTextField items;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jugar;
    private javax.swing.JPanel tablero;
    // End of variables declaration//GEN-END:variables
}
